Okay, here's a breakdown of your feature list, prioritized, and organized into a 5-day development schedule. I've considered your tech stack (Next.js, NextAuth.js, Prisma, Neon PSQL, Server Actions) and the importance of core features. This schedule aims to build a functional, iterative MVP, focusing on getting key features working before tackling less critical ones.

Assumptions:

You have basic Next.js app setup with Prisma configured and connected to your Neon PSQL database.

You have a basic understanding of NextAuth.js and how to implement authentication.

UI/UX will be kept relatively simple for this initial sprint. Functionality is the focus.

Error handling and detailed logging are kept minimal for initial phases.

Email sending functionality can be mocked or use a simple, free email service (like SendGrid's free tier) during development and can be optimized later.

Score:

Your assigned scores are:

Theory: 2

Practical: 2

This suggests that you have some foundational knowledge but need to solidify your understanding and apply it practically. This schedule is designed to help you achieve that through focused implementation.

Overall Strategy:

Focus on Core Authentication and User Management First: This is the foundation of your application. Without secure and reliable user management, nothing else matters.

Iterative Development: Each day builds on the previous one. We start with the simplest implementation and add complexity as needed.

Prioritize Practical Implementation: The schedule emphasizes hands-on coding and problem-solving.

Leverage Server Actions: You're planning to use Server Actions, which is excellent for a full-stack Next.js app. Ensure you understand how to use them effectively for database interactions.

Day 1: Authentication Foundation & Basic User Creation

Goal: Implement basic authentication with NextAuth.js and allow new user registration with email/password and basic profile information.

Tasks:

(9:00 AM - 12:00 PM): NextAuth.js Setup & Google Provider Integration:

Install necessary NextAuth.js packages (next-auth).

Configure NextAuth.js with a simple email/password provider and the Google provider (if possible, prioritize email/password first for speed of initial setup).

Implement basic sign-in and sign-out functionality on the frontend.

Google Sign-up: Option to choose new account or existing:

Within your NextAuth.js callbacks (specifically signIn), detect if a user with the Google email already exists in your database.

If the user exists, sign them in.

If the user doesn't exist, present the user with a choice:

"Create a new account" (redirect to your registration form, pre-filled with the Google email and name).

"Sign in with existing account" (redirect to the standard sign-in page).

(1:00 PM - 5:00 PM): New User Registration (Email/Password):

Create a /register page with a simple form (email, password, name).

Implement a Server Action to handle user registration. This should:

Validate input data.

Hash the password using bcrypt.

Create a new user record in the User table in your Prisma schema.

Send email verification link (see below).

(5:00 PM - 7:00 PM): Email Verification Link:

Generate unique verification token (e.g., using uuid or crypto).

Store the token and user ID in a VerificationToken table in Prisma.

Create a "verify email" page (/verify-email/[token]).

Implement a Server Action on the "verify email" page that:

Retrieves the token from the URL parameter.

Queries the VerificationToken table for a matching token.

If the token is valid and not expired, update the user's emailVerified field to true in the User table.

Delete the token from the VerificationToken table.

Redirect the user to a "verification successful" page.

Email Sending (Simple): For now, use a basic console.log to simulate sending an email. Later, replace this with a proper email service.

(7:00 PM - 10:00 PM): Prisma Schema and Basic Data Access Layer:

Define your User model in your schema.prisma file (including fields like id, email, name, password, emailVerified, etc.).

Create basic data access functions in a separate file (e.g., lib/db.ts):

createUser(data: UserData): Creates a new user.

getUserByEmail(email: string): Retrieves a user by email.

verifyEmail(token: string): Verifies a user's email.

Day 2: User Profile, Authentication Enhancements, and Git Setup

Goal: Allow users to view and edit their profile, implement "Forgot Password" functionality, and finalize Git setup.

Tasks:

(9:00 AM - 12:00 PM): User Profile (View & Edit):

Create a /profile page (protected by NextAuth.js's useSession hook).

Display the user's profile information.

Create an "Edit Profile" form that allows users to update their name (and potentially other basic fields).

Implement a Server Action to handle profile updates.

(1:00 PM - 4:00 PM): Forgot Password with OTP:

Create a "Forgot Password" page (/forgot-password).

Implement a form where the user enters their email address.

Server Action:

Validate the email.

Check if the email exists in the database.

Generate a random OTP (e.g., 6-digit number).

Store the OTP and user ID in an OTP table in Prisma (include an expiry timestamp).

Send the OTP to the user's email address.

Create a "Reset Password" page (/reset-password/[email]).

Implement a form where the user enters the OTP and new password.

Server Action:

Validate the OTP and new password.

Verify that the OTP matches the stored OTP for the user's email.

Hash the new password.

Update the user's password in the User table.

Delete the OTP from the OTP table.

Redirect the user to the sign-in page.

(4:00 PM - 6:00 PM): Git Setup:

Initialize a Git repository in your project directory (git init).

Create a .gitignore file to exclude sensitive files (e.g., .env, node_modules).

Commit your changes regularly.

Push your code to a remote repository (GitHub, GitLab, Bitbucket).

(6:00 PM - 10:00 PM): Data Access Layer Enhancements:

Add functions for:

updateUser(id: string, data: Partial<UserData>): Updates a user's profile.

createOTP(email: string, otp: string): Creates an OTP record.

verifyOTP(email: string, otp: string): Verifies an OTP.

resetPassword(email: string, hashedPassword: string): Resets a user's password.

Day 3: Role-Based Access Control (RBAC) & Basic Mentor List

Goal: Implement basic role-based access control for APIs and create a simple mentor listing.

Tasks:

(9:00 AM - 12:00 PM): Role-Based Access Control (RBAC):

Add a role field to the User model in your Prisma schema (e.g., USER, MENTOR, ADMIN). Default to USER.

Implement middleware or Server Action checks to restrict access to certain API endpoints based on the user's role.

Example: Create a /api/admin/users endpoint (using the Next.js API routes). This endpoint should only be accessible to users with the ADMIN role. Return a 403 (Forbidden) error if a user without the ADMIN role tries to access it.

For authentication, use the NextAuth.js session to check the role.

(1:00 PM - 5:00 PM): Mentor List:

Create a Mentor model in your Prisma schema (consider linking it to the User model). Include fields like userId, bio, expertise, etc.

Create a /mentors page.

Implement a Server Action to fetch a list of mentors from the database (filter users where role is MENTOR and potentially other criteria).

Display the mentor list on the /mentors page (basic card layout with name, bio, expertise).

(5:00 PM - 10:00 PM): Data Access Layer Enhancements:

Add functions for:

getMentors(): Retrieves a list of mentors.

createMentorProfile(data: MentorData): Creates a mentor profile.

getUsersByRole(role: string): Retrieves users by role (useful for admin tasks).

Day 4: Mentor Registration & Admin User Management

Goal: Allow users to register as mentors (with document upload and OTP verification) and implement basic admin user management (verify/block).

Tasks:

(9:00 AM - 1:00 PM): Register as Mentor (with Documents & OTP):

Create a /register-mentor page (protected by NextAuth.js).

Implement a form where the user can:

Upload documents (e.g., resume, certifications). Important: Handle file uploads securely! Use a service like Cloudinary or AWS S3 for storing files, and store the URLs in your database.

Enter an OTP (similar to "Forgot Password").

Server Action:

Validate the form data.

Upload the documents to your chosen service (Cloudinary, S3).

Generate an OTP.

Store the OTP and user ID in the OTP table.

Send the OTP to the user's email address.

Implement a separate OTP verification step (similar to "Forgot Password"). Once verified, update the user's role to MENTOR and create a Mentor record.

(2:00 PM - 6:00 PM): Admin User Management (Verify/Block):

Create an /admin/users page (protected by RBAC â€“ only accessible to ADMIN role).

Display a list of users with their roles and status (e.g., emailVerified, blocked).

Implement actions to:

"Verify" a user (manually set emailVerified to true). Send an email notification to the user.

"Block" a user (add a blocked field to the User model and set it to true). Prevent blocked users from signing in. Send an email notification.

(6:00 PM - 10:00 PM): Data Access Layer Enhancements:

Add functions for:

updateUserRole(id: string, role: string): Updates a user's role.

blockUser(id: string): Blocks a user.

unblockUser(id: string): Unblocks a user.

Day 5: Skill Management & Polish/Refactor

Goal: Implement skill management and refactor code for better readability and maintainability.

Tasks:

(9:00 AM - 1:00 PM): Skill Management:

Create a Skill model in your Prisma schema (e.g., id, name).

Add a many-to-many relationship between User and Skill (using a join table).

Allow users to select skills from a pre-defined list on their profile page.

Server Actions:

Fetch the list of available skills.

Update the user's skills.

Display the user's skills on their profile.

(2:00 PM - 6:00 PM): Code Refactoring & Polish:

Review your code and identify areas for improvement.

Extract reusable components.

Improve error handling.

Add more detailed logging.

Write unit tests (if time permits).

Address any outstanding bugs.

(6:00 PM - 10:00 PM): Documentation & Deployment:

Write basic documentation for your API endpoints and components.

Deploy your application to a hosting platform (Vercel, Netlify).

Important Considerations:

Security: Always prioritize security! Use strong passwords, validate input data, protect against XSS and CSRF attacks, and secure your API endpoints.

Error Handling: Implement robust error handling throughout your application. Display meaningful error messages to the user.

Testing: Write unit tests and integration tests to ensure your code is working correctly.

UI/UX: While functionality is the priority, strive to create a user-friendly interface.

Email Service: Integrate a proper email service (e.g., SendGrid, Mailgun, AWS SES) as soon as possible. Don't rely on console.log for production.

File Uploads: Securely handle file uploads! Use a dedicated service and validate file types and sizes.

Data Validation: Validate all user input on both the client-side and server-side.

Rate Limiting: Implement rate limiting on your API endpoints to prevent abuse.

Monitoring: Set up monitoring to track the performance of your application and identify any issues.

Key Takeaways:

This is a starting point. Adjust the schedule based on your progress and priorities.

Don't get bogged down in perfection. Focus on getting the core functionality working.

Commit your code frequently and push to your remote repository.

Ask for help when you need it!

Good luck! Let me know if you have any questions as you go through this schedule. I'm here to help.